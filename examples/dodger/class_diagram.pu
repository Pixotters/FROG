@startuml

namespace sf {
    interface Transformable{
      vector2f position
      vector2f scale
      float rotation
    }
    interface Drawable{
        draw(RenderTarget, RenderStates)
    }
    class RenderTarget
    class RenderTexure{
        clear()
        draw(Drawable)
    }   
    class RenderWindow{
          clear()
          draw(Drawable)
          display()
    }
}

class App << Singleton >>{
      -RenderWindow window
      -Config config
      -Clock clock
      -Time deltaTime
      -bool isRunning
      -float fps
      -StateManager stateManager
     void init()
     void run() 
     void exit()
     void update()
     void render()
     bool isRunning() 
     RenderWindow getWindow()
     Clock getClock()
     Time getDeltaTime()
     Config getConfig()
     StateManager getStateManager()
}

class StateManager{
      -stack<State> stateStack
      void push(State *)
      State * pop()
      State * change(State *)
      bool isEmpty()
      void clear()
      void update()
      void render(RenderTarget)
}

abstract class State{
      -Renderer renderer
      update()
}

class Renderer{
      draw(RenderTarget, RenderStates)
}

class Scene{
      -list<GameObject> entities
      void drawEntities(RenderTarget, RenderState)
}

abstract class GameObject{
      void update()
}

abstract class Element{
      -unsigned short health
}

class Player{
      -unsigned short lifes
      -unsigned long score
      -Shape boundingBox
      unsigned short getLifes()
      void setLife(unsigned short)
      void addLifes(unsigned short)
      void removeLifes(unsigned short)
      unsigned long getScore()
      void setScore(unsigned long)
      void addScore(unsigned long)
      void removeScore(unsigned long)
}

abstract class PhysicObject{
      -sf::vector2f velocity
}

App *-- StateManager
StateManager *-- State
State --|> sf.Drawable
State *-- Renderer
Renderer --|> sf.RenderTexure
Scene -left-|> State
Scene o-right- GameObject
GameObject --|> sf.Transformable
GameObject --|> sf.Drawable
Player -left-|> GameObject
'Bullet -left-|> GameObject
'Element -left-|> GameObject
'Target -left-|> Element
'Enemy -left-|> Element
'App o-- InputHandler
'Element --|> PhysicObject
'PhysicObject --|> sf.Transformable
sf.RenderWindow --|> sf.RenderTarget
sf.RenderTexture --|> sf.RenderTarget

@enduml