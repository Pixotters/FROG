@startuml

abstract class Input{
         virtual bool handle(Controller *)
}

abstract class ContinuousButton

abstract class SimpleButton{
      Trigger getTrigger()
}

class MouseButton{
      sf::Mouse::Button getButton()
}

class KeyboardButton{
      sf::Keyboard:Key getButton()
}

class JoystickButton{
      unsigned int getButton()
}

abstract class Command{
      void execute()
}

class Controller{
virtual void handle();
void suscribe(Input *, Command *)
void unsuscribe(Input *)
std::queue<Command *> getCommands()
void addCommand(Command *)
bool handle(JoystickButton *)
bool handle(KeyboardButton *)
bool handle(MouseButton *)

}

SimpleButton -down-|> Input
ContinuousButton -up-|> Input
JoystickButton -up-|> ContinuousButton
KeyboardButton -up-|> ContinuousButton
MouseButton -up-|> ContinuousButton

Input -left-o Controller
Controller o-right- Command

note "Trigger is an enum : PRESSED, RELEASED, CONTINUOUS" as tr
tr .left. SimpleButton

note "Controller holds maps [Input -> Command]" as map
map .. Controller

@enduml