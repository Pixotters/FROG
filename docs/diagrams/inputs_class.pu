@startuml


abstract class Command{
      void execute()
}


class Filter << T >>{
list<T> check
list<T> filter(list<T>)
suscribe(T)
unsuscribe(T)
clear()
}

class Translator << IN, OUT >>{
map< IN, OUT > binding
OUT get(IN)
suscribe(IN, OUT)
OUT unsuscribe(IN)
}

package ctrl{

abstract class Input{
         virtual bool check(Controller *)
}

abstract class Button

abstract class SimpleButton{
      Trigger getTrigger()
}

class MouseButton{
      sf::Mouse::Button getButton()
}

class KeyboardButton{
      sf::Keyboard:Key getButton()
}

class JoystickButton{
      unsigned int getButton()
}


class ControlHandler{
      list<Input *> update()
      bool check(Input *)
      bool check(KeyboardButton *)
      bool check(MouseButton *)
      bool check(JoystickButton *)
      bool check(KeyboardSimpleButton *)
      bool check(MouseSimpleButton *)
      bool check(JoystickSimpleButton *)
}

class Controller{
Command * bind(Input *, Command *, unsigned short = 0)
unbind(Input *, unsigned short = 0)
unbindAll(Input *)
unsigned short addInputMap(InputMap *)
removeInputMap(unsigned short)
InputMap * changeInputMap(InputMap *, unsigned short = 0)
}

Button --|> Input
SimpleButton --|> Button
'JoystickButton -up-|> Button
KeyboardButton -left-|> Button
MouseButton -right-|> Button
'JoystickSimpleButton --|> JoystickButton
KeyboardSimpleButton --|> KeyboardButton
MouseSimpleButton --|> MouseButton
'JoystickSimpleButton --|> SimpleButton
KeyboardSimpleButton --|> SimpleButton
MouseSimpleButton --|> SimpleButton

Input --o ControlHandler
ControlHandler --o Controller
Controller o-- InputMap
Input --o InputMap
Command --o InputMap

note "Trigger is an enum : PRESSED, RELEASED" as tr
'tr .left. SimpleButton

}

ControlHandler --|> Filter : Filter<Input *>
InputMap --|> Translator : Translator<Input *, Command *>

@enduml