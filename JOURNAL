= 13/02 //(JBY)// =

Réflexions sur la modularité. Un schéma a été construit.

== Objectifs pour la semaine suivante ==

Pour la semaine du 20 spécification d'un jeu minimal (dans ses aspects 
graphiques : proposition un personnage controlé dans des murs avec un 
poursuivant), pour identifier les modules essentiels et envisager un 
calendrier 
de spécification sur les modules essentiels et ensuite un calendrier de 
réalisation.

= 20/02 //(Stefano)//=

Nous avons ecrit les spécifications (de maniere informelle) de deux jeux 
afin de voir de suite ce qui peut etre factorise et dessine un diagramme 
temporel des differentes actions des modules pendant une //game loop//.

Un debut de recherche sur les frameworks de tests unitaires pour c++ a 
permit de decouvrir UnitTest++, plus de recherches permettront de fixer 
notre choix dans la semaine.

Les deux jeux sont :
# **Cat'n'mouse** : Le jeu du chat et de la souris. Le joueur (chat) doit 
  attraper la souris qui se balade dans une pièce avec des murs. Se joue au 
  clavier.  
# Dodger : Jeu de reflèxes, où le joueur doit éviter des objets tout en 
  tirant sur d'autres. Jouable à la souris.  

Les spécifications sont disponibles dans le dossier ``examples``. De grandes 
questions se sont posées sur les évènements et collisions, à débattre.

== Objectifs pour la semaine suivante ==

- Ecrire des diagrammes plus standardises (UML) et identifier :
  -- Les dependances entres les modules de la //game loop//.
  -- Identifier ce qui sera facile a modifier dans le futur et ce qui devra 
     etre fixe des le debut.
- Commencer le developpement pour definir les interfaces de facon plus
  concrete. (Pas forcement de jeu fonctionnel, mais au moins les interfaces 
  des modules)
- Choisir un framework de tests unitaires et ecrire les tests necessaires a 
  cette premiere iteration.

== Notes ==

Julien sera au ski du 22/02 au 02/03. Nicolas codera normalement. Julien 
commentera le code et ecrira les tests unitaires pour les modules 
implementes.

= 27/02 =

Pour les tests unitaires, le choix c'est finalement porte sur la librairie 
Boost, qui offre un framework simple d'utilisation (utilisation de macro, 
pas besoin d'heriter d'une classe test et de surcharger des fonctions, comme 
certaines librairies), et est suffisament repandu pour pouvoir trouver de 
l'aide et des tutoriaux facilement. Le framework de tests unitaires de 
google etait aussi candidat mais n'a pas ete retenu.

Quelques tests unitaires triviaux ont ete ecrit pour la classe ``Player`` du 
jeu //Dodger//, mais la premiere implementation rapide des classes du jeu 
etant mal hierarchisee, impossible de compiler les tests a cause d'une 
double definition de la fonction ``main``.

Une fois ce probleme regle, plus de tests suivront, et l'analyse de la 
couverture sera faite avec ``gcov`` de ``gcc``.

== Objectifs pour la semaine suivante ==

- Travail sur la notion de rendu des objets, question en train d'etre 
  debattue, et developpement du module. Integration a l'objet du renderer ? 
  Utilisation d'une classe d'association pour objet/renderer ?

= 06/02 =

= 13/02 =