= SFGL project =

A project by Nicolas Cailloux and Julien Sagot

== Why ? ==

We want to make portable games. Games with a 's'.

== What ? ==

=== Short description ===

We aim to create a (2D) game developement toolkit. A library to automate (or to 
make easier) boring and redundant task common to all (or many) games, such as 
easy menus creation, rendering... Poviding ready-to-use modules.

=== Details ===

Depending on 

==== Basic features ====

- **Main loop management:**
  -- Poll inputs
  -- Compute current configuration of the game
  -- Render
- **Game states:**
  -- Transitions between different game states (splashscreen, main menu, option 
     menu...).
- **Resources:** manage external ressources, avoiding loading a image twice, 
    for instance.
- **Input handling:** ready-to-use parametrized event handlers (make a handler 
  from associative (input code list * action) list).
- **Rendering:** basic actions such as automated scaling or rotating, layers 
  management, fading...

==== Basic features II ====

- **GUI toolkit:** in the spirit of Swing/AWT library of Java component and 
  containers, with ready-to-use layout manager.
- **Sprite animation:** 2D games often use sprites to render animation. We aim 
  to produce a generic manager to process this animation task (bind actions 
  with sprite suit and animation speed).

==== Advanced features ====

- **Collision/physics:** space partition, collision detection.
- **Generic maps:** Generic maps representation, with basics implemented 
  functions for square/hexagonal grids (connection between two cells). Obvious 
  for square boards, but need some tricks for hexagonal ones.
- **Sound:**
- **Multiple views:** splitscreen

==== Advanced features II ====

- **Network:** Server(logic)/Client(inputs) designed game engine, with lag 
  compensation enablable.
- **Lighting/shadows:** for fancy scenes.

== How ? ==

SFGL will be Written is C/C++, and based on the Simple and Fast Multimedia 
Library (also known as SFML), which already implements some features that we 
will enhance (especially window displaying, basic view handler). As SFML is 
portable, SFGL should stay portable.
